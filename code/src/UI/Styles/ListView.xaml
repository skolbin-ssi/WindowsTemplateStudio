<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    x:Class="Microsoft.Templates.UI.Styles.ListView"
    xmlns:services="clr-namespace:Microsoft.Templates.UI.Services"
    xmlns:converters="clr-namespace:Microsoft.Templates.UI.Converters"
    xmlns:controls="clr-namespace:Microsoft.Templates.UI.Controls"
    xmlns:extensions="clr-namespace:Microsoft.Templates.UI.Extensions"
    xmlns:core="clr-namespace:Microsoft.Templates.Core;assembly=Microsoft.Templates.Core"
    xmlns:strings="clr-namespace:Microsoft.Templates.UI.Resources">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/_Thickness.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/Button.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/Ellipse.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/Image.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/ImageEx.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/ScrollViewer.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/TextBlock.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/TextBox.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:SavedTemplateGridConverter x:Key="SavedTemplateGridConverter" />

    <ItemsPanelTemplate x:Key="WtsItemsPanelTemplate">
        <WrapPanel Margin="{StaticResource Margin_M2_LeftRight}" Orientation="Horizontal" />
    </ItemsPanelTemplate>

    <!-- New Project Project type / Framework -->

    <Style x:Key="WtsListViewItemSingleSelection" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="{StaticResource CardBorderThickness}" />
        <Setter Property="BorderBrush" Value="{Binding CardBorderDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="{StaticResource Margin_XS_LeftTopRightBottom}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Title}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="border" Margin="{TemplateBinding Margin}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundSelected, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderSelected, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="IsSelected" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WtsListViewSingleSelection" TargetType="{x:Type ListView}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ItemsPanel" Value="{StaticResource WtsItemsPanelTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource WtsListViewItemSingleSelection}" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="0" Margin="0" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Margin="0" Padding="0" Style="{StaticResource WtsScrollViewer}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--TODO Add IsEnabled visual states-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WtsListViewSingleSelectionWithoutScroll" TargetType="{x:Type ListView}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ItemsPanel" Value="{StaticResource WtsItemsPanelTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource WtsListViewItemSingleSelection}" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="0" Margin="0" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="WtsListViewItemMultipleSelection" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="{StaticResource CardBorderThickness}" />
        <Setter Property="BorderBrush" Value="{Binding CardBorderDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Background" Value="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Title}" />
        <Setter Property="AutomationProperties.HelpText" Value="{Binding Title, StringFormat={x:Static strings:StringRes.HelpTextPressEnterToAddItem}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Margin="0" Width="181" Height="219">
                        <Border Margin="14,2,2,14" BorderThickness="1.5" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" Visibility="{Binding HasMoreThanTwo, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <Border Margin="11,5,5,11" BorderThickness="1.5" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" Visibility="{Binding HasMoreThanOne, Converter={StaticResource BoolToVisibilityConverter}}" />

                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" Margin="{StaticResource Margin_S_LeftTopRightBottom}">
                            <ContentPresenter />
                        </Border>
                        <Grid x:Name="addIcon" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top" Height="30" Width="30"  Margin="{StaticResource Margin_M3_LeftTop}">
                            <Ellipse Fill="{Binding CardBackgroundDefault, Source={x:Static services:UIStylesService.Instance}}" Stroke="{Binding CardBorderSelected, Source={x:Static services:UIStylesService.Instance}}" StrokeThickness="1"/>
                            <TextBlock Style="{StaticResource WtsTextBlockCardMouseOverAddIcon}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Disabled}" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderDisabled, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding CanBeAdded}" Value="true" />
                                <Condition Binding="{Binding Disabled}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Visibility" TargetName="addIcon" Value="Visible" />
                                <Setter Property="Background" TargetName="border" Value="{Binding CardBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{Binding CardBorderHover, Source={x:Static services:UIStylesService.Instance}}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="IsSelected" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WtsListViewMultipleSelection" TargetType="{x:Type ListView}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalOnly"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemsPanel" Value="{StaticResource WtsItemsPanelTemplate}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource WtsListViewItemMultipleSelection}" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Padding="{TemplateBinding Padding}" Margin="0" Focusable="False">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--TODO Add IsEnabled visual states-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="WtsListViewItemSequentialFlow" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding ListItemText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="{StaticResource Margin_S_Bottom}" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Title}" />
        <Setter Property="AutomationProperties.AutomationId" Value="{Binding Path=Index, StringFormat=Step{0:}}" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Grid x:Name="bd" MinHeight="35"  Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock
                                Grid.Column="0"
                                x:Name="text"
                                Foreground="{TemplateBinding Foreground}"
                                Style="{StaticResource WtsTextBlockSequentialFlow}"
                                extensions:TextBlockExtensions.SequentialFlowStep="{Binding}"
                                extensions:TextBlockExtensions.SequentialFlowStepIndex="{Binding Index}"
                                extensions:TextBlockExtensions.SequentialFlowStepCompleted="{Binding Completed}" />
                            <TextBlock
                                Grid.Column="1"
                                x:Name="checkMark"
                                Style="{StaticResource WtsTextBlockSequentialFlowCheckMark}"                                    
                                Foreground="{TemplateBinding Foreground}"
                                Visibility="{Binding Completed, Converter={StaticResource BoolToVisibilityConverter}}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <Setter Property="Background" TargetName="bd" Value="{Binding SelectedItemActive, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="text" Value="{Binding SelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding SelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="text" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="text" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" TargetName="text" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="checkMark" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WtsListViewSequentialFlow" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="LightGreen" />
        <Setter Property="Margin" Value="26,20" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Focusable" Value="False" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource WtsListViewItemSequentialFlow}" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static strings:StringRes.AccessibilityNavigationMenu}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="WtsListViewItemProjectDetailsTemplates" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Name}" />
        <Setter Property="extensions:FocusExtension.IsFocused" Value="{Binding IsFocused}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Grid Background="{Binding SavedTemplateBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" Visibility="{Binding IsDragging, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <Grid x:Name="mouseOverGrid" Opacity="0" Background="{Binding SavedTemplateBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                        <Grid Style="{Binding HasErrors, Converter={StaticResource SavedTemplateGridConverter}}"/>
                        <Grid Margin="{StaticResource Margin_S_TopBottom}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="22" />
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="26" />
                                </Grid.ColumnDefinitions>
                                <TextBlock
                                    Grid.Column="0"
                                    x:Name="mouseOverDragAndDropTextBlock"
                                    Opacity="0"
                                    Visibility="{Binding IsReorderEnabled, Converter={StaticResource BoolToVisibilityConverter}}"
                                    Style="{StaticResource WtsTextBlockDragAndDropTemplate}"/>
                                <controls:ImageEx
                                    Grid.Column="1"
                                    SourcePath="{Binding Icon}"
                                    Style="{StaticResource WtsImageExProjectDetails}" />
                                <Grid
                                    Grid.Column="2">
                                    <TextBox
                                        Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource WtsTextBoxStyle}"
                                        Margin="{StaticResource Margin_XS_Left}"
                                        Visibility="{Binding ItemNameEditable, Converter={StaticResource BoolToVisibilityConverter}}"
                                        AutomationProperties.Name="{x:Static strings:StringRes.AccessibilityEditPageItem}"
                                        extensions:TextBoxExtensions.IsTextSelected="{Binding IsTextSelected}"
                                        Tag="{Binding LostKeyboardFocusCommand}"
                                        LostKeyboardFocus="OnLostKeyboardFocus">
                                        <TextBox.InputBindings>
                                            <KeyBinding Key="Enter" Command="{Binding SetFocusCommand}" />
                                        </TextBox.InputBindings>
                                    </TextBox>
                                    <TextBlock
                                        Text="{Binding Name, Mode=OneWay}"
                                        Style="{StaticResource WtsTextBlockSavedTemplateName}"
                                        Margin="{StaticResource Margin_M_Left}"
                                        Visibility="{Binding ItemNameEditable, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=reverse}" />
                                </Grid>
                                <Button x:Name="mouseOverDeleteTemplateButton" Grid.Column="3">
                                    <Button.Style>
                                        <Style TargetType="Button" BasedOn="{StaticResource WtsButtonDeleteTemplate}">
                                            <Setter Property="Opacity" Value="0" />
                                            <Setter Property="Command" Value="{Binding DeleteCommand}" />
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </Grid>
                        </Grid>
                        <Grid x:Name="dropGridMask" Visibility="Collapsed" Opacity="0.4" Background="{Binding SavedTemplateBackgroundHover, Source={x:Static services:UIStylesService.Instance}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="mouseOverGrid" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDragAndDropTextBlock" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDeleteTemplateButton" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Opacity" TargetName="mouseOverGrid" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDragAndDropTextBlock" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDeleteTemplateButton" Value="1" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter Property="Opacity" TargetName="mouseOverGrid" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDragAndDropTextBlock" Value="1" />
                            <Setter Property="Opacity" TargetName="mouseOverDeleteTemplateButton" Value="1" />
                        </Trigger>
                        <EventTrigger RoutedEvent="DragEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dropGridMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="DragLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dropGridMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Drop">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dropGridMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <DataTrigger Binding="{Binding IsReorderEnabled}" Value="true">
                            <Setter Property="AutomationProperties.HelpText" Value="{x:Static strings:StringRes.ReorderPageHelpText}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WtsListViewProjectDetailsTemplates" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource WtsListViewItemProjectDetailsTemplates}" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static strings:StringRes.AccessibilityUserSelectionPageList}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="WtsListViewItemNewItemFile" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding ListItemText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Margin" Value="{StaticResource Margin_XS_Bottom}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="OnPreviewMouseLeftButtonDown" />
        <Setter Property="AutomationProperties.Name" Value="{Binding Subject}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="bd" ToolTip="{Binding Subject}">
                        <Grid Margin="{StaticResource Margin_S_LeftTopRightBottom}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Ellipse Grid.Column="0" Fill="{Binding CircleColor, FallbackValue=Red}" Style="{StaticResource WtsEllipseNewItemFileCircle}" Margin="{StaticResource Margin_XS_Left}" />
                            <Image Grid.Column="1" Source="{Binding Icon}" Style="{StaticResource WtsImageNewItemFileIcon}" Margin="{StaticResource Margin_XS_Left}" />
                            <TextBlock x:Name="fileName" Grid.Column="2" Text="{Binding Subject}" Style="{StaticResource WtsTextBlockNewItemFileSubject}" Margin="{StaticResource Margin_XS_LeftRight}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="true">
                            <Setter Property="Background" TargetName="bd" Value="{Binding SelectedItemActive, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding SelectedItemActiveText, Source={x:Static services:UIStylesService.Instance}}" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected}" Value="false" />
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="bd" Value="{Binding ListItemMouseOver, Source={x:Static services:UIStylesService.Instance}}" />
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding ListItemMouseOverText, Source={x:Static services:UIStylesService.Instance}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" TargetName="fileName" Value="{Binding ListItemDisabledText, Source={x:Static services:UIStylesService.Instance}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WtsListViewNewItemFile" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{Binding ListItemText, Source={x:Static services:UIStylesService.Instance}}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource WtsListViewItemNewItemFile}" />
        <Setter Property="SelectionMode" Value="Single" />
        <EventSetter Event="PreviewKeyDown" Handler="OnPreviewKeyDown" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
